type Comment @model @auth(rules: [{allow: public}]) {
    id: ID!
    createdAt: AWSDateTime!
    comment: String!
    userID: ID! @index(name: "byUser")
    postID: ID! @index(name: "byPost", queryField: "commentsByPost", sortKeyFields: ["createdAt"])
    User: User @belongsTo(fields: ["userID"])
    Post: Post @belongsTo(fields: ["postID"])
}

type Post @model @auth(rules: [{allow: public}]) {
    id: ID!
    createdAt: AWSDateTime!
    type: String! @index(name: "postsByDate", queryField: "postsByDate", sortKeyFields: ["createdAt"])
    title: String!
    price: String!
    adress: String!
    User: User @belongsTo(fields: ["userID"])
    Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
    description: String!
    userID: ID! @index(name: "byUser")
    lat: String
    long: String
    category: String
}

type User @model @auth(rules: [{allow: public}]) {
    id: ID!
    email: String!
    name: String
    location: String
    image: String
    phoneNumber: String
    employer: Boolean!
    about: String
    userJob: [String]
    fcmToken: String
    Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
    Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
    Notifications: [Notification] @hasMany(indexName: "byUser", fields: ["id"])
}

enum NotificationTypes {
    NEW_POST
    NEW_COMMENT
}

type Notification @model @auth(rules: [{allow: public}]) {
    id: ID!
    createdAt: AWSDateTime!
    readAt: AWSTimestamp!
    type: NotificationTypes
    #The user who have to notify
    userId: ID! @index(name: "byUser", sortKeyFields: ["createdAt"], queryField: "userNotifications")
    User: User @belongsTo(fields: ["userId"])
    #The user who triggered notification
    actorId: ID!
    Actor: User @belongsTo(fields: ["actorId"])
    Post: Post @hasOne
    Comment: Comment @hasOne
}

type Subscription {
    onCommentByPostId(postID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
}
